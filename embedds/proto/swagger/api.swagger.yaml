openapi: 3.0.0
info:
  title: embedds
  version: 1.0.0
  contact:
    name: anansi
    url: https://github.com/infrawhispers/anansi
    email: infrawhispers@proton.me
  license:
    name: Apache 2.0 License
    url: https://github.com/infrawhispers/anansi/blob/main/LICENSE
tags:
  - name: Api
paths:
  /encode:
    post:
      summary: encode
      description: "Generates a vector representation of text or images using the
        specified embedding model. If the model does not exist or has not been
        loaded, an error will be returned for that particular data item.
        <br/><br/>It is recommended that multiple pieces of content are
        specified in a single request to take advantage of batching, especially
        when running under with a GPU accelerated <a
        href='https://onnxruntime.ai/docs/execution-providers/'
        target='_blank'>ExecutionProvider.</a> Recommended sizes can be found at
        <a href='/embedds/supported-models'
        target='_blank'>embedds/model-details</a> and embedds will attempt to
        split and batch encoding requests.<br/>----<br/><b>Not all models
        support [text, instructions, image, image_uri]</b> a breakdown of
        present support is outlined below:<ul><li>ModelClass_INSTRUCTOR -
        requires: {text, instructions}</li><li>ModelClass_CLIP - any_of: {text,
        image_uri, image}</li></ul>"
      operationId: Api_Encode
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiEncodeResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/apiEncodeRequest"
        required: true
      tags:
        - Api
  /initalize_models:
    post:
      summary: initialize_models
      description: Intializes an onnx model, adding it to the pool of models available
        for embedding generation. ONNX models are loaded from the folder
        designated by ```EMBBEDDS_CACHE_FOLDER``` and it is recommended that
        this folder be volume mounted if running within a container.<br/><br/>If
        the model is missing, the server will attempt to download the
        corresponding file from a remote source.<br/><br/>embedds must be
        created with ```EMBEDDS_ALLOW_ADMIN=true``` as the unrestricted creation
        of models can lead to resource starvation. If you are exposing the
        process to non-trusted clients, we recommended that
        ```EMBEDDS_ALLOW_ADMIN``` be set to false.
      operationId: Api_InitializeModel
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiInitializeModelResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/apiInitializeModelRequest"
        required: true
      tags:
        - Api
components:
  schemas:
    apiEncodeItem:
      type: object
      properties:
        model_class:
          $ref: "#/components/schemas/apiModelClass"
        model_name:
          type: string
          description: specific name of the model to apply the encoding transformation
        text:
          type: array
          items:
            type: string
          description: repeated text to encode
        instructions:
          type: array
          items:
            type: string
          description: a list of instructions to pass to ```INSTRUCTOR``` based models
        image:
          type: array
          items:
            type: string
            format: byte
          description: repeated raw jpeg bytes
        image_uri:
          type: array
          items:
            type: string
          description: repeated uris to fetch image data from
      description: Minimal encoding unit associating a piece of content [text, image,
        image_uri] with a selected model
      required:
        - model
    apiEncodeRequest:
      type: object
      example:
        data:
          - model_class: ModelClass_INSTRUCTOR
            model_name: INSTRUCTOR_LARGE
            text:
              - "3D ActionSLAM: wearable person tracking ..."
              - Inside Gohar World and the Fine, Fantastical Art
            instructions:
              - "Represent the Science title:"
              - "Represent the Magazine title:"
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/apiEncodeItem"
          description: repeated data items to generate encodings for
    apiEncodeResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/apiEncodeResult"
          description: list of embedding results corresponding to the ordered content
            submitted
    apiEncodeResult:
      type: object
      properties:
        err_message:
          type: string
          description: explanation for why the content could not be encoded
        embedding:
          type: array
          items:
            type: number
            format: float
          description: embedding representation of the the content
    apiInitializeModelRequest:
      type: object
      properties:
        models:
          type: array
          example:
            - model_name: M_INSTRUCTOR_BASE
              num_threads: 4
              parallel_execution: true
          items:
            $ref: "#/components/schemas/apiModelSettings"
          description: A list of models to be initialized
    apiInitializeModelResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/apiModelInitResult"
    apiModelClass:
      type: string
      enum:
        - ModelClass_Unknown
        - ModelClass_CLIP
        - ModelClass_INSTRUCTOR
      default: ModelClass_Unknown
    apiModelInitResult:
      type: object
      properties:
        model_class:
          $ref: "#/components/schemas/apiModelClass"
        model_name:
          type: string
          description: specific name of the model to apply the encoding transformation
        initialized:
          type: boolean
          description: whether or not the model was successfully initalized
        err_message:
          type: string
          description: error details outlining why the model could not be initialized
      description: Configuration settings for the instantiaion of an onnx model
      readOnly: true
    apiModelSettings:
      type: object
      properties:
        model_class:
          $ref: "#/components/schemas/apiModelClass"
        model_name:
          type: string
          description: specific name of the model to apply the encoding transformation
        num_threads:
          type: integer
          format: int64
          description: The number of threads to parallelize the execution of the graph -
            if the graph can be parallelized. <br/> If unset, defaults to the
            available parallelism on the underlying machine.
        parallel_execution:
          type: boolean
          description: Enable/disable the parallel execution of the graph. Parallel
            execution can improve model execution speed at the cost of increased
            memory usage.
      description: Configuration settings for the instantiaion of an onnx model
      required:
        - model_name
    protobufAny:
      type: object
      properties:
        "@type":
          type: string
      additionalProperties: {}
    rpcStatus:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            $ref: "#/components/schemas/protobufAny"
