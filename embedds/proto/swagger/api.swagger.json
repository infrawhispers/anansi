{
  "swagger": "2.0",
  "info": {
    "title": "embedds",
    "version": "1.0.0",
    "contact": {
      "name": "anansi",
      "url": "https://github.com/infrawhispers/anansi",
      "email": "infrawhispers@proton.me"
    },
    "license": {
      "name": "Apache 2.0 License",
      "url": "https://github.com/infrawhispers/anansi/blob/main/LICENSE"
    }
  },
  "tags": [
    {
      "name": "Api"
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/encode": {
      "post": {
        "summary": "encode",
        "description": "Generates a vector representation of text or images using the specified embedding model. If the model does not exist or has not been loaded, an error will be returned for that particular data item. \u003cbr/\u003e\u003cbr/\u003eIt is recommended that multiple pieces of content are specified in a single request to take advantage of batching, especially when running under with a GPU accelerated \u003ca href='https://onnxruntime.ai/docs/execution-providers/' target='_blank'\u003eExecutionProvider.\u003c/a\u003e Recommended sizes can be found at \u003ca href='/embedds/supported-models' target='_blank'\u003eembedds/model-details\u003c/a\u003e and embedds will attempt to split and batch encoding requests.\u003cbr/\u003e----\u003cbr/\u003e\u003cb\u003eNot all models support [text, instructions, image, image_uri]\u003c/b\u003e a breakdown of present support is outlined below:\u003cul\u003e\u003cli\u003eModelClass_INSTRUCTOR - requires: {text, instructions}\u003c/li\u003e\u003cli\u003eModelClass_CLIP - any_of: {text, image_uri, image}\u003c/li\u003e\u003c/ul\u003e",
        "operationId": "Api_Encode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiEncodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiEncodeRequest"
            }
          }
        ],
        "tags": [
          "Api"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/initalize_models": {
      "post": {
        "summary": "initialize_models",
        "description": "Intializes an onnx model, adding it to the pool of models available for embedding generation. ONNX models are loaded from the folder designated by ```EMBBEDDS_CACHE_FOLDER``` and it is recommended that this folder be volume mounted if running within a container.\u003cbr/\u003e\u003cbr/\u003eIf the model is missing, the server will attempt to download the corresponding file from a remote source.\u003cbr/\u003e\u003cbr/\u003eembedds must be created with ```EMBEDDS_ALLOW_ADMIN=true``` as the unrestricted creation of models can lead to resource starvation. If you are exposing the process to non-trusted clients, we recommended that ```EMBEDDS_ALLOW_ADMIN``` be set to false.",
        "operationId": "Api_InitializeModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiInitializeModelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiInitializeModelRequest"
            }
          }
        ],
        "tags": [
          "Api"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    }
  },
  "definitions": {
    "apiEncodeItem": {
      "type": "object",
      "properties": {
        "model_class": {
          "$ref": "#/definitions/apiModelClass",
          "description": "corresponding class in which the model_name belongs to"
        },
        "model_name": {
          "type": "string",
          "description": "specific name of the model to apply the encoding transformation"
        },
        "text": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "repeated text to encode"
        },
        "instructions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "a list of instructions to pass to ```INSTRUCTOR``` based models"
        },
        "image": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "repeated raw jpeg bytes"
        },
        "image_uri": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "repeated uris to fetch image data from"
        }
      },
      "description": "Minimal encoding unit associating a piece of content [text, image, image_uri] with a selected model",
      "required": [
        "model"
      ]
    },
    "apiEncodeRequest": {
      "type": "object",
      "example": {
        "data": [
          {
            "model_class": "ModelClass_INSTRUCTOR",
            "model_name": "INSTRUCTOR_LARGE",
            "text": [
              "3D ActionSLAM: wearable person tracking ...",
              "Inside Gohar World and the Fine, Fantastical Art"
            ],
            "instructions": [
              "Represent the Science title:",
              "Represent the Magazine title:"
            ]
          }
        ]
      },
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiEncodeItem"
          },
          "description": "repeated data items to generate encodings for"
        }
      }
    },
    "apiEncodeResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiEncodeResult"
          },
          "description": "list of embedding results corresponding to the ordered content submitted"
        }
      }
    },
    "apiEncodeResult": {
      "type": "object",
      "properties": {
        "err_message": {
          "type": "string",
          "description": "explanation for why the content could not be encoded"
        },
        "embedding": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          },
          "description": "embedding representation of the the content"
        }
      }
    },
    "apiInitializeModelRequest": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "example": [
            {
              "model_name": "M_INSTRUCTOR_BASE",
              "num_threads": 4,
              "parallel_execution": true
            }
          ],
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiModelSettings"
          },
          "description": "A list of models to be initialized"
        }
      }
    },
    "apiInitializeModelResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiModelInitResult"
          }
        }
      }
    },
    "apiModelClass": {
      "type": "string",
      "enum": [
        "ModelClass_Unknown",
        "ModelClass_CLIP",
        "ModelClass_INSTRUCTOR"
      ],
      "default": "ModelClass_Unknown"
    },
    "apiModelInitResult": {
      "type": "object",
      "properties": {
        "model_class": {
          "$ref": "#/definitions/apiModelClass",
          "description": "corresponding class in which the model_name belongs to"
        },
        "model_name": {
          "type": "string",
          "description": "specific name of the model to apply the encoding transformation"
        },
        "initialized": {
          "type": "boolean",
          "description": "whether or not the model was successfully initalized"
        },
        "err_message": {
          "type": "string",
          "description": "error details outlining why the model could not be initialized"
        }
      },
      "description": "Configuration settings for the instantiaion of an onnx model",
      "readOnly": true
    },
    "apiModelSettings": {
      "type": "object",
      "properties": {
        "model_class": {
          "$ref": "#/definitions/apiModelClass",
          "description": "corresponding class in which the model_name belongs to"
        },
        "model_name": {
          "type": "string",
          "description": "specific name of the model to apply the encoding transformation"
        },
        "num_threads": {
          "type": "integer",
          "format": "int64",
          "description": "The number of threads to parallelize the execution of the graph - if the graph can be parallelized. \u003cbr/\u003e If unset, defaults to the available parallelism on the underlying machine."
        },
        "parallel_execution": {
          "type": "boolean",
          "description": "Enable/disable the parallel execution of the graph. Parallel execution can improve model execution speed at the cost of increased memory usage."
        }
      },
      "description": "Configuration settings for the instantiaion of an onnx model",
      "required": [
        "model_name"
      ]
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
